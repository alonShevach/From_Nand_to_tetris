/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A or M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=outMux1);

    // checks whether instruction[15] == 0 (A instruction), or instruction[5] == 1 (load A)
    Not(in=instruction[15], out=notC);
    Or(a=notC, b=instruction[5], out=loadA);
    ARegister(in=outMux1, load=loadA, out=outAreg, out[0..14]=addressM);

    // checks whether instruction[15] == 1 (C instruction), and instruction[4] == 1 (load D)
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outAlu, load=loadD, out=outDreg);

    Mux16(a=outAreg, b=inM, sel=instruction[12], out=outMux2);

    ExtendAlu(x=outDreg, y=outMux2, instruction[0..5]=instruction[6..11], instruction[6]=false,
    instruction[7..8]=instruction[13..14], out=outAlu, zr=zr, ng=ng, out=outM);

     // instruction for writeM:
    And(a=instruction[3], b=instruction[15], out=writeM);

    // instruction for jump if zero:
    And(a=instruction[1], b=zr, out=jumpIfZero);

    // instruction for jump if negative:
    Not(in=zr, out=notZr);
    And(a=ng, b=notZr, out=negative);
    And(a=instruction[2], b=negative, out=jumpIfNeg);

    // instruction for jump if positive:
    Not(in=ng, out=notNg);
    And(a=notNg, b=notZr, out=pos);
    And(a=instruction[0], b=pos, out=jumpIfPos);

    // chooses what to load to the pc:
    Or(a=jumpIfNeg, b=jumpIfZero, out=zrOrNg);
    Or(a=zrOrNg, b=jumpIfPos, out=temp);
    And(a=temp, b=instruction[15], out=loadPc);

    PC(in=outAreg, reset=reset, load=loadPc, inc=true, out[0..14]=pc);
}
