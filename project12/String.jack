// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string;
    field int length, max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let max_length = maxLength;
        if (maxLength = 0) {
            let max_length = 1;
        }
        let string = Array.new(max_length);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

        /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max_length) {
            do setCharAt(length, c);
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            return;
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean is_neg;
        var int current, digit, sum;
        let current = 0;
        let sum = 0;
        let is_neg = false;
        if (string[0] = 45)
        {
            let is_neg = true;
            let current = 1;
        }
        while (current < length) {
            let digit = string[current] - 48;
            if (~(digit < 0 | digit > 9)) {
                let sum = (sum * 10) + digit;
                let current = current + 1;
            }
            else {
                let current = length;
            }
        }
        if (is_neg) {
            return -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
	method void setInt(int val) {
        var int digit, current, len;
		let len = 0;
		let current = val;
		if (val < 0) {
			let val = -val;
			let len = len + 1;
			let string[0] = 45;
		}
		let current = val;
		while (current > 0) {
			let len = len + 1;
			let current = current / 10;
		}
		let current = val;
		let length = len;
        while (current > 0) {
            let digit = current - ((current / 10) * 10);
            let digit = digit + 48;
            do setCharAt(len - 1, digit);
            let len = len - 1;
            let current = current / 10;
        }
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
