// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram, free;
	static int end;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let free = 2048;
		let free[0] = 14335;
		let free[1] = 0;
		let end = 0;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array current, block;
		var int i;
		let current = free;
		while (~(size < (current[0] + 2))) {
            let block  = current[1];
            let current = block;
        }
        let i = size + 2;
		let current[0] = current[0] - i;
		let block = current + current[0];
		let block[0] = i;
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let end = o - free;
        let free[end] = 0;
		return;
    }    
}
