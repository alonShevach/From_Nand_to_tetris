// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=outMux1);

    // checks whether instruction[15] == 0 (A instruction), or instruction[5] == 1 (load A)
    Not(in=instruction[15], out=notC);
    Or(a=notC, b=instruction[5], out=loadA);
    ARegister(in=outMux1, load=loadA, out=outAreg, out[0..14]=addressM);

    // checks whether instruction[15] == 1 (C instruction), and instruction[4] == 1 (load D)
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outAlu, load=loadD, out=outDreg);

    Mux16(a=outAreg, b=inM, sel=instruction[12], out=outMux2);

    ALU(x=outDreg, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9],
     ny=instruction[8], f=instruction[7], no=instruction[6], out=outAlu, zr=zr, ng=ng, out=outM);

     // instruction for writeM:
    And(a=instruction[3], b=instruction[15], out=writeM);

    // instruction for jump if zero:
    And(a=instruction[1], b=zr, out=jumpIfZero);

    // instruction for jump if negative:
    Not(in=zr, out=notZr);
    And(a=ng, b=notZr, out=negative);
    And(a=instruction[2], b=negative, out=jumpIfNeg);

    // instruction for jump if positive:
    Not(in=ng, out=notNg);
    And(a=notNg, b=notZr, out=pos);
    And(a=instruction[0], b=pos, out=jumpIfPos);

    // chooses what to load to the pc:
    Or(a=jumpIfNeg, b=jumpIfZero, out=zrOrNg);
    Or(a=zrOrNg, b=jumpIfPos, out=temp);
    And(a=temp, b=instruction[15], out=loadPc);

    PC(in=outAreg, reset=reset, load=loadPc, inc=true, out[0..14]=pc);
}