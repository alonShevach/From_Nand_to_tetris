// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array bits;
    static int begin_screen;
    static boolean current_color;

    /** Initializes the Screen. */
    function void init() {
        let current_color = true;
        let begin_screen = 16384;
        let bits = Array.new(16);
        do Screen.init_bits();
        return;
    }

    /** Initializes the bits array. */
    function void init_bits() {
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int end_screen, i;
        let end_screen = 24576;
        let i = begin_screen;
        while (i < end_screen) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let current_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, i;
        let address = Math.multiply(y, 32) + Math.divide(x, 16);
        let value = Memory.peek(begin_screen + address);
        let i = x & 15;
        if (current_color) {
            let value = value | bits[i];
        }
        else{
            let value = value & (~bits[i]);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, tmp;
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        if (dx < 0) {
            let dx = -dx;
            let tmp = x1;
			let x1 = x2;
			let x2 = tmp;
			let tmp = y1;
			let y1 = y2;
			let y2 = tmp;
        }
        let dy = y2 - y1;
        if (x1 = x2) {
            do Screen.drawVertical(y1, dy, x1);
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontal(x1, dx, y1);
            return;
        }
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        while ((~(a > dx)) & (~(b < dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff > 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b - 1;
                let diff = diff + dx;
            }
        }
        return;
    }

    /** Draws an horizontal line. */
    function void drawHorizontal(int x1, int dx, int y) {
        while (~(dx = 0)) {
            if (dx < 0) {
                do Screen.drawPixel(x1 + dx, y);
                let dx = dx + 1;
            }
            else {
                do Screen.drawPixel(x1 + dx, y);
                let dx = dx - 1;
            }
        }
        return;
    }

    /** Draws a vertical line. */
    function void drawVertical(int y1, int dy, int x) {
        while (~(dy = 0)) {
            if (dy < 0) {
                do Screen.drawPixel(x, y1 + dy);
                let dy = dy + 1;
            }
            else {
                do Screen.drawPixel(x, y1 + dy);
                let dy = dy - 1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~((y1 - y2) = 0)) {
            do Screen.drawHorizontal(x1, x2 - x1, y1);
            let y1 = y1 - 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int squared_r, squared_dy, dy;
        let squared_r = r * r;
        let dy = -r;
        while (dy < r + 1) {
            let squared_dy = dy * dy;
            do Screen.drawHorizontal(x, 2 * Math.sqrt(squared_r - squared_dy), y);
        }
        return;
    }
}
