// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bits;
    static int factor;

    /** Initializes the library. */
    function void init() {
        let factor = 0;
        let bits = Array.new(16);
        do Math.init_bits();
        return;
    }

    /** Initializes the bits array. */
    function void init_bits() {
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i;
        let sum = 0;
        let shifted_x = x;
        let i = 0;
        if (x = 0 | y = 0) {
            return 0;
        }
        while (i < 16) {
            if (y & bits[i] = bits[i]) {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, abs_x, abs_y;
        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);
        let factor = 0;
        let q = Math.divide_helper(abs_x, abs_y);
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            return -q;
        }
        return q;
    }

    /** Returns the division result, regardless the sign of it. */
    function int divide_helper(int x, int y) {
        var int q;
        if (y > x | y < 0) {
            let factor = 0;
            return 0;
        }
        let q = Math.divide_helper(x, (y + y));
        if ((x - factor) < y) {
            return q + q;
        }
        let factor = factor + y;
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, sum, square;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let sum = y + bits[j];
            let square = Math.multiply(sum, sum);
            if ((~(square > x)) & (square > 0))  {
                let y = y + bits[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
